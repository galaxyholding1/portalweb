import { Formatter } from "../../../../util/formatter";
import { Card } from "../Card/Card";
import "./BalanceCard.css";
import { Icon } from "../../ui/Icon/Icon";
import { getPathByClient } from "../../../../util/getModeClient";
import { useLocation } from "react-router";

// Example data for product balances. In a real application,
// this data would come from an API or a global state.
const balanceByProduct = [
  { type: "cuenta galaxy pay", balance: 1000, productId: 1234567 },
  { type: "IBAN", balance: 2000, productId: 1234567 },
];

/**
 * BalanceCard Component
 *
 * @component
 * @description Displays the available balance for different types of products (accounts).
 * It uses a table to list the account type, product number, and balance.
 * Provides a link to view more balance details.
 *
 * @returns {JSX.Element} A card that shows an overview of account balances.
 */
export const BalanceCard = () => {
  // Gets the current URL path to determine the client mode (e.g., "people" or "business").
  const { pathname } = useLocation();

  return (
    // Main container with a CSS class for grid positioning.
    <div className="grid-area-balance">
      {/* Card Component: A generic container with a title, icon, and a "view more" link.
        - title: The card's title.
        - icon: The icon accompanying the title.
        - morePath: The path to which the "view more" link redirects, dynamically determined
                    based on the client type.
      */}
      <Card
        title="Saldo" // "Balance"
        icon={<Icon name="cents" width={16} />}
        morePath={`${getPathByClient(pathname)}/balance`}
      >
        {/* Table to display balance details */}
        <table className="balance-table">
          {/* Table header */}
          <thead className="balance-table-header">
            <tr>
              <th>Tipo</th> {/* "Type" */}
              <th>NÃºmero</th> {/* "Number" */}
              <th>Saldo Disponible</th> {/* "Available Balance" */}
            </tr>
          </thead>
          {/* Table body with balance data */}
          <tbody className="balance-table-body">
            {/* Maps over the `balanceByProduct` array to render a row for each product.
              The `key` is generated by combining `productId` and `index` to ensure uniqueness.
            */}
            {balanceByProduct.map(({ type, balance, productId }, i) => (
              <tr key={`${productId}${i}`}>
                {/* Product type (e.g., "galaxy pay account", "IBAN") */}
                <td>{type}</td>
                {/* Product identification number */}
                <td>{productId}</td>
                {/* Available balance, formatted as currency using `Formatter.formatCurrency` */}
                <td>{Formatter.formatCurrency(balance)}</td>
              </tr>
            ))}
          </tbody>
        </table>
      </Card>
    </div>
  );
};